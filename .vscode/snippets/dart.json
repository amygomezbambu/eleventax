{
  "Pruebas": {
    "prefix": "sp_expectThrows",
    "body": [
      "await expectLater(",
      "() => ${1:metodoAsincrono},",
      "throwsA(isA<AppEx>()),",
      "reason:",
      "    '',",
      ");"
    ]
  },
  "Create Riverpod Provider": {
    "prefix": "s_provider",
    "body": [
      "import 'package:flutter_riverpod/flutter_riverpod.dart';",
      "",
      "abstract class ${1:View}State {",
      "",
      "  ${1:View}State();",
      "}",
      "",
      "class ${1:View}LoadedState extends ${1:View}State {",
      "",
      "  ${1:View}LoadedState();",
      "}",
      "",
      "class ${1:View}Notifier extends StateNotifier<${1:View}State> {",
      "  ${1:View}Notifier() : super(${1:View}InitialState());",
      "}",
      "",
      "final $2Provider = StateNotifierProvider<${1:View}Notifier, ${1:View}State>(",
      "  (ref) => ${1:View}Notifier(),",
      ");",
      "",
      "//Estados adicionales Opcionales",
      "class ${1:View}InitialState extends ${1:View}State {",
      "",
      "  ${1:View}InitialState();",
      "}",
      "",
      "class ${1:View}LoadingState extends ${1:View}State {",
      "",
      "  ${1:View}LoadingState();",
      "}",
      "",
      "class ${1:View}ErrorState extends ${1:View}State {",
      "  final String message;",
      "",
      "  ${1:View}ErrorState(this.message);",
      "}"
    ],
    "description": "Crea el estado, el notificador y el provider para una vista"
  },
  "Caso de uso": {
    "prefix": "s_usecase",
    "body": [
      "import 'package:eleventa/modulos/common/app/usecase/usecase.dart';",
      "",
      "class ${1:UseCase}Request {",
      "",
      "  var property1 = '';",
      "}",
      "",
      "class ${1:UseCase} extends Usecase<${2:void}> {",
      "",
      "  var req = ${1:UseCase}Request();",
      "  IRepositorio${3:Entidad} _repo;",
      "",
      "  ${1:UseCase}(IRepositorio${3:Entidad} repo): _repo = repo, super(_repo) { operation = _operation; }",
      "",
      "  Future<${2:void}> _operation() async { }",
      "}",
      ""
    ],
    "description": "Crea el estado, el notificador y el provider para una vista"
  },
  "Entidad de dominio": {
    "prefix": "s_entity",
    "body": [
      "import 'package:eleventa/modulos/common/domain/entidad.dart';",
      "import 'package:eleventa/modulos/common/utils/uid.dart';",
      "",
      "class ${1:Entidad} extends Entidad {",
      "",
      "  var _property1 = '';",
      "",
      "  ${1:Entidad}.crear({required String property1}): _property1 = property1, super.crear();",
      "",
      "  ${1:Entidad}.cargar({required UID uid,required String property1}): _property1 = property1, super.cargar(uid);",
      "}",
      ""
    ],
    "description": "Crea el estado, el notificador y el provider para una vista"
  },
  "Repositorio": {
    "prefix": "s_repo",
    "body": [
      "class Repositorio${1:Entidad}s extends Repositorio implements IRepositorio${1:Entidad}s {",
      "  Repositorio${1:Entidad}s({",
      "    required ISync syncAdapter,",
      "    required IAdaptadorDeBaseDeDatos db,",
      "  }) : super(syncAdapter, db);",
      "",
      "  @override",
      "  Future<void> agregar(${1:Entidad} entidad) async {",
      "    // TODO: implementar eliminar",
      "    throw UnimplementedError();",
      "  }",
      "",
      "  @override",
      "  Future<void> eliminar(UID id) {",
      "    // TODO: implementar eliminar",
      "    throw UnimplementedError();",
      "  }",
      "",
      "  @override",
      "  Future<void> modificar(${1:Entidad} entidad) {",
      "    // TODO: implement modificar",
      "    throw UnimplementedError();",
      "  }",
      "}",
      ""
    ],
    "description": "Crea una implementación de un repositorio"
  },
  "Repositorio Consultas": {
    "prefix": "s_repocons",
    "body": [
      "class RepositorioConsulta${1:Entidad}s extends RepositorioConsulta implements IRepositorioConsulta${1:Entidad}s {",  
      "  RepositorioConsulta${1:Entidad}s(",
      "      {required IAdaptadorDeBaseDeDatos db, required ILogger logger})",
      "      : super(db, logger);",
      "",
      "  @override",      
      "  Future<${1:Entidad}?> obtener${1:Entidad}(UID uid) async {",
      "    ${1:Entidad}? entidad;",
      "",
      "    var sql = '''",
      "      SELECT * FROM ${1:Entidad} WHERE uid = ?;",
      "      ''';",
      "",
      "    var result = await query(sql: sql, params: [uid]);",
      "",
      "    if (result.isNotEmpty) {",
      "      final row = result.first;",
      "      entidad = ${1:Entidad}.cargar(",
      "        uid: UID.fromString(row['uid'] as String)",     
      "      );",
      "    }",
      "",
      "    return entidad;",
      "  }",
      "",
      "}"
    ],
    "description": "Crea una implementación de un repositorio"
  },
  "Query Base de Datos": {
    "prefix": "s_db_query",
    "body": [
      "List<${1:TipoEntidad}> result = []",
      "",
      "final query = 'select * from tabla where condicion';",
      "",
      "final dbResult = await db.query(sql: query, params: []);",
      "",
      "for (var row in dbResult) {",
      "  result.add(${1:TipoEntidad}.cargar(",
      "  uid: UID.fromString(row['uid'] as String),",
      "  campo: row['nombre'] as String",
      "  ));",
      "}",
      "",
      "return result;",
      ""
    ],
    "description": "Crea una implementación de un repositorio"
  }
}
