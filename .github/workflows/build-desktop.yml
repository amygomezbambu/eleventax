name: Desplegar binarios desktop

on:
  # Para que se generen correctamente las ligas de nightly.link
  # se necesita que se ejecute en cada push a main
  # push:
  #   branches:
  #     - main
  workflow_dispatch:
  workflow_call:

jobs:
  build-desktop:
    strategy:
      fail-fast: true
      matrix:
        include:
          - arch: aarch64
            os: macos-latest
            target: macos
            lipo-arch: arm64
          - arch: amd64
            os: macos-latest
            target: macos
            lipo-arch: x86_64
          - arch: amd64
            os: windows-latest
            target: windows

    name: ${{ matrix.target }} ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Obtenemos la version de Flutter de pubspec.yaml
        id: get-flutter-version
        uses: zgosalvez/github-actions-get-flutter-version-env@v2

      - name: Instalar Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ steps.get-flutter-version.outputs.version }}
          channel: "stable"
          cache: true

      - if: ${{ matrix.target == 'windows' }}
        name: Instalar OpenSSL necesario para SQLite/SQLCipher
        run: choco install openssl

      - name: Instalar dependencias
        run: flutter pub get

      - name: Generar clases de Dart necesarias con secretos embebidos (y ofuscados)
        run: flutter pub run build_runner build --delete-conflicting-outputs
        # Las variables de entorno tienen que estar disponibles en esta etapa
        # que es cuando se genera el env.g.dart con los secrets "hard codeados"
        # y que se usarÃ¡n despues en las pruebas
        env:
          MIXPANEL_PROJECT_ID: ${{ secrets.MIXPANEL_PROJECT_ID }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          FLAGSMITH_APIKEY: ${{ secrets.FLAGSMITH_APIKEY }}
          DB_PASSWORD: 12345

      - name: Compilar binario
        run: flutter build ${{ matrix.target }} --release -v

      - if: ${{ matrix.target == 'macos' }}
        name: "MacOS: Adelgazar binario"
        run: >-
          lipo build/macos/Build/Products/Release/eleventa.app/Contents/MacOS/eleventa
          -output build/macos/Build/Products/Release/eleventa.app/Contents/MacOS/eleventa
          -thin ${{ matrix.lipo-arch }}

      - if: ${{ matrix.target == 'windows' }}
        name: "Windows: Subir artifact"
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.target }}-${{ matrix.arch }}
          path: build/windows/runner/Release

      - if: ${{ matrix.target == 'macos' }}
        name: "MacOS: Comprimir archivos"
        run: >-
          tar cvf build-${{ matrix.target }}-${{ matrix.arch }}.tar
          -C build/macos/Build/Products/Release eleventa.app

      - if: ${{ matrix.target != 'windows' }}
        name: "Subir Tar"
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.target }}-${{ matrix.arch }}
          path: build-${{ matrix.target }}-${{ matrix.arch }}.tar
