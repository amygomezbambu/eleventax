name: Testing

on:
  pull_request:

jobs:
  unit-tests:
    name: Ejecutando pruebas unitarias en ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
    steps:
      - uses: actions/checkout@v3

      - name: Obtenemos la version de Flutter de pubspec.yaml
        id: get-flutter-version
        uses: zgosalvez/github-actions-get-flutter-version-env@v1.1.4

      - uses: subosito/flutter-action@v2.8.0
        with:
          channel: "stable"
          cache: true
          os: ${{ matrix.os }}
          flutter-version: ${{ steps.get-flutter-version.outputs.version }}
          architecture: x64
          cache-key: "flutter-:os:-:channel:-:version:-:arch:"
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"
      - run: |
          echo CACHE-PATH=${{ steps.flutter-action.outputs.CACHE-PATH }}
          echo CACHE-KEY=${{ steps.flutter-action.outputs.CACHE-KEY }}
          echo CHANNEL=${{ steps.flutter-action.outputs.CHANNEL }}
          echo VERSION=${{ steps.flutter-action.outputs.VERSION }}
          echo ARCHITECTURE=${{ steps.flutter-action.outputs.ARCHITECTURE }}
        shell: bash

      # Copiamos los DLLs a la carpeta donde se ejecutan las pruebas de unidad
      - name: Copiamos DLLs de SQLite para que funcionen las pruebas (solo Windows)
        if: runner.os == 'Windows'
        run: Copy-Item -Path "assets/windows/*" -Destination "${{ env.FLUTTER_ROOT }}\bin\cache\artifacts\engine\windows-x64"

      - name: Instalar dependencias
        run: flutter pub get

      - name: Generar clases de Dart necesarias con secretos embebidos (y ofuscados)
        run: flutter pub run build_runner build --delete-conflicting-outputs
        # Las variables de entorno tienen que estar disponibles en esta etapa
        # que es cuando se genera el env.g.dart con los secrets "hard codeados"
        # y que se usar√°n despues en las pruebas
        env:
          MIXPANEL_PROJECT_ID: ${{ secrets.MIXPANEL_PROJECT_ID }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          DB_PASSWORD: 12345

      - name: Ejecutando pruebas unitarias
        run: flutter test --test-randomize-ordering-seed=random -rexpanded
